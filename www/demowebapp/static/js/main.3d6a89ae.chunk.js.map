{"version":3,"sources":["ui/recordstable.js","ui/editform.js","ui/recordsbuttons.js","ui/records.js","service.js","ui/page.js","state.js","index.js"],"names":["RecordsTable","observer","_ref","state","h","Table","id","hover","records","map","record","index","indexSelected","onClick","name","EditForm","service","modalToggle","modal","isShown","alertToggle","alert","formSubmit","length","putRecord","findIndex","elem","React","Fragment","Modal","autoFocus","isOpen","toggle","ModalHeader","title","ModalBody","Form","FormGroup","Label","for","Input","readOnly","placeholder","defaultValue","value","onKeyPress","e","key","onChange","target","ModalFooter","Button","color","RecordsButtons","className","disabled","selectionActive","deleteRecord","getUniqueID","Records","backend","undefined","init","stateArg","axios","create","baseURL","window","location","protocol","host","process","timeout","fetchRecordsList","whenReady","get","then","data","Math","min","Object","keys","element","catch","err","console","error","delete","put","Page","lifecycle","componentDidMount","this","props","setInterval","Switch","Route","exact","path","render","observable","reduce","currentMax","currentId","parseInt","ReactDOM","BrowserRouter","basename","document","getElementById"],"mappings":"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","file":"static/js/main.3d6a89ae.chunk.js","sourcesContent":["import * as h from 'react-hyperscript-helpers'\nimport {observer} from \"mobx-react\"\nimport { Table } from 'reactstrap';\n\nconst RecordsTable = observer( ({state}) =>\n{\n    return h.h(Table,\n    {\n        id: \"recordsTable\",\n        hover: true\n    },\n    [\n        h.thead(\n            [\n            h.tr(\n            [\n                h.th([\"ID\"]),\n                h.th([\"Name\"])\n            ]\n            )\n            ]\n        ),\n        h.tbody(\n            state.records.map(\n                (record, index) =>\n                    h.tr(\n                    {\n                        id: (index === state.indexSelected) ? \"rowSelected\" : \"\",\n                        onClick: () => { state.indexSelected = index }\n                    },\n                    [\n                        h.td(record.id),\n                        h.td(record.name)\n                    ]\n                    )\n            )\n        )\n    ]\n    )\n})\n\nexport { RecordsTable }\n","import React from 'react'\nimport * as h from 'react-hyperscript-helpers'\nimport {observer} from \"mobx-react\"\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst EditForm = observer( ({state, service}) =>\n{\n    const modalToggle = () => { state.modal.isShown = !state.modal.isShown }\n    const alertToggle = () => { state.modal.alert.isShown = !state.modal.alert.isShown }\n\n    const formSubmit = () => {\n        if (state.modal.name.length === 0)\n        {\n            state.modal.alert.isShown = true\n            return false\n        }\n\n        service.putRecord(\n            state.modal.id,\n            state.modal.name,\n            () => {\n                state.indexSelected = state.records.findIndex(\n                    (elem) => {\n                        return (elem.id === state.modal.id)\n                    }\n                )\n            }\n        )\n\n        state.modal.isShown=false\n\n        return true\n    }\n\n    return h.h(React.Fragment,\n    [\n        h.h(Modal,\n        {\n            autoFocus: false,\n            isOpen: state.modal.isShown,\n            toggle: modalToggle\n        },\n        [\n            h.h(ModalHeader, { toggle: modalToggle }, [state.modal.title]),\n            h.h(ModalBody,\n            [\n                h.h(Form,\n                {\n                    id: \"editForm\"\n                },\n                [\n                    h.h(FormGroup,\n                    [\n                        h.h(Label, \"ID:\", { for: \"id_IDInput\" }),\n                        h.h(Input,\n                        {\n                            readOnly: true,\n                            name: \"name_IDInput\",\n                            id: \"id_IDInput\",\n                            placeholder: \"A unique alphanumerical ID\",\n                            defaultValue: state.modal.id\n                        }\n                        )\n                    ]\n                    ), // FormGroup \"ID\"\n                    h.h(FormGroup,\n                    [\n                        h.h(Label, \"Name:\", { for: \"id_NameInput\" } ),\n                        h.h(Input,\n                        {\n                            autoFocus: true,\n                            name: \"name_NameInput\",\n                            id: \"id_NameInput\",\n                            placeholder: \"A person's name\",\n                            value: state.modal.name,\n                            onKeyPress: (e) => {\n                                if (e.key === 'Enter')\n                                    formSubmit()\n                            },\n                            onChange: (e) => {\n                                state.modal.name = e.target.value\n                            }\n                        }\n                        )\n                    ]\n                    ) // FormGroup \"Name\"\n                ] // array of FormGroups\n                ) // Form\n            ]\n            ), // ModalBody\n            h.h(ModalFooter,\n            [\n                h.h(Button,\n                {\n                    color: \"secondary\",\n                    onClick: () => {\n                        state.modal.isShown=false\n                    }\n                },\n                [\"Cancel\"]\n                ),\n                h.h(Button,\n                {\n                    color: \"primary\",\n                    onClick: formSubmit\n                },\n                [\"Save\"]\n                )\n            ]\n            ) // ModalFooter\n        ]\n        ), // Modal form\n        h.h(Modal,\n        {\n            autoFocus: false,\n            isOpen: state.modal.alert.isShown,\n            toggle: alertToggle\n        },\n        [\n            h.h(ModalHeader, { toggle: alertToggle }, [\"Error\"]),\n            h.h(ModalBody, [\"The name cannot be empty\"]),\n            h.h(ModalFooter,\n            [\n                h.h(\n                    Button,\n                    {\n                        autoFocus: true,\n                        color: \"secondary\",\n                        onClick: () => {\n                            state.modal.alert.isShown=false\n                        }\n                    },\n                    [\"OK\"]\n                )\n            ]\n            )\n        ]\n        ) // Modal alert\n    ]\n    ) // React.Fragment\n})\n\n\nexport { EditForm }\n","import * as h from 'react-hyperscript-helpers'\nimport {observer} from \"mobx-react\"\nimport {EditForm} from \"./editform.js\"\nimport { Button } from 'reactstrap';\n\nconst buttonType = \"secondary\"\n\n\nconst RecordsButtons = observer( ({state, service}) =>\n{\n    return h.div(\n        \"#recordsbuttons\",\n        [\n            h.h(\n                Button,\n                {\n                    className : \"recordButton\",\n                    color: buttonType,\n                    disabled: !state.selectionActive(),\n                    onClick : () => { service.deleteRecord(state.records[state.indexSelected].id) }\n                },\n                [ \"Delete\" ]\n            ),\n            h.h(\n                Button,\n                {\n                    className : \"recordButton\",\n                    color: buttonType,\n                    disabled: !state.selectionActive(),\n                    onClick : () => {\n                        state.modal.title=\"Edit person\"\n                        state.modal.id=state.records[state.indexSelected].id\n                        state.modal.name=state.records[state.indexSelected].name\n                        state.modal.isShown=true\n                    }\n                },\n                [ \"Edit\" ]\n            ),\n            h.h(\n                Button,\n                {\n                    className : \"recordButton\",\n                    color: buttonType,\n                    onClick : () => {\n                        state.modal.title=\"New person\"\n                        state.modal.id=state.getUniqueID()\n                        state.modal.name=\"\"\n                        state.modal.isShown=true\n                    }\n                },\n                [ \"New\" ]\n            ),\n            h.h(EditForm, {state, service})\n        ]\n    )\n})\n\n\nexport { RecordsButtons }\n","import * as h from 'react-hyperscript-helpers'\nimport {observer} from \"mobx-react\"\nimport {RecordsTable} from \"./recordstable.js\"\nimport {RecordsButtons} from \"./recordsbuttons.js\"\n\nconst Records = observer( ({state, service}) =>\n{\n    return h.div(\n        \"#records\",\n        [\n            h.h(RecordsTable, {state}),\n            h.h(RecordsButtons, {state, service})\n        ]\n    )\n})\n\nexport { Records }\n","import axios from 'axios'\n\nconst service = {}\nvar backend = undefined\nvar state = undefined\n\n// Transform records retrieved from webservice into a format used by web app\nfunction processRecords(records)\n{\n    return Object.keys(records).map(\n        (element, index) =>\n        {\n            return {\n                id: element,\n                name: records[element].name\n            }\n        }\n    )\n}\n\n//\nservice.init = function(stateArg)\n{\n    state = stateArg\n\n    backend = axios.create(\n        {\n            baseURL: window.location.protocol + \"//\" + window.location.host + process.env.PUBLIC_URL + \"/api/\",\n            timeout: 2000\n        }\n    )\n}\n\n//\nservice.fetchRecordsList = function(whenReady)\n{\n    if (!backend)\n    {\n        console.error(\"Service not initialized\")\n        return\n    }\n\n    backend\n        .get(\"/records\")\n        .then(data =>\n            {\n                state.indexSelected = Math.min(state.indexSelected, Object.keys(data.data).length-1)\n                state.records = processRecords(data.data)\n            }\n        )\n        .then(() =>\n            {\n                if (whenReady)\n                    whenReady()\n            }\n        )\n        .catch(\n            err =>\n            {\n                console.error(\"An error occurred: \" + err);\n                return null;\n            })\n}\n\n//\nservice.deleteRecord = function(id)\n{\n    if (!backend)\n    {\n        console.error(\"Service not initialized\")\n        return\n    }\n\n    backend\n        .delete(\"/record/\" + id)\n        .then(() =>\n            {\n                service.fetchRecordsList()\n            }\n        )\n        .catch(\n            err =>\n            {\n                console.error(\"An error occurred: \" + err);\n                return null;\n            })\n}\n\n//\nservice.putRecord = function(id, name, whenReady)\n{\n    if (!backend)\n    {\n        console.error(\"Service not initialized\")\n        return\n    }\n\n    backend\n        .put(\"/record/\" + id, { \"name\": name } )\n        .then(() =>\n            {\n                service.fetchRecordsList(whenReady)\n            }\n        )\n        .catch(\n            err =>\n            {\n                console.error(\"An error occurred: \" + err);\n                return null;\n            })\n}\n\nexport { service }\n","import { Switch, Route } from 'react-router-dom'\nimport * as h from 'react-hyperscript-helpers'\nimport {observer} from \"mobx-react\"\nimport { lifecycle } from 'recompose'\n\nimport {Records} from './records.js'\nimport {service} from '../service.js'\n\nconst Page = lifecycle(\n\n{\n    componentDidMount()\n    {\n        service.init(this.props.state)\n        service.fetchRecordsList()\n\n        setInterval(\n            () =>\n            {\n                service.fetchRecordsList()\n            },\n            6000\n        )\n    }\n}\n\n)(observer(\n\n({ state }) =>\n{\n    return h.h(\n        Switch,\n        [\n            h.h(\n                Route,\n                {\n                    exact: true,\n                    path: '/',\n                    render: () => {\n                        return [\n                            h.h(Records, {state, key: \"records\", service})\n                        ]\n                    }\n                }\n            )\n        ]\n    )\n}\n))\n\nexport { Page }\n","import {observable} from \"mobx\"\n\nconst state = observable({\n    indexSelected : 0,\n\n    modal: {\n        isShown: false,\n        title: \"\",\n        id: \"\",\n        name: \"\",\n        alert: {\n            isShown: false\n        }\n    },\n\n    records: [],\n\n    selectionActive: () => (state.records.length>0 && state.indexSelected>=0),\n\n    getUniqueID: () => {\n        return \"\" + (state.records.reduce(\n            (currentMax, record) => {\n                const currentId = parseInt(record.id, 10)\n                return (currentId > currentMax) ? currentId : currentMax\n            },\n            0\n        ) + 1)\n    }\n})\n\nexport { state }\n","import { BrowserRouter } from 'react-router-dom'\nimport * as h from 'react-hyperscript-helpers'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport {Page} from './ui/page.js'\nimport './ui/index.css'\nimport {state} from './state.js'\n\nReactDOM.render(\n    h.h(BrowserRouter,\n        {\n            basename: process.env.PUBLIC_URL\n        },\n        [\n            h.h(Page, { state })\n        ]\n    )\n    ,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}